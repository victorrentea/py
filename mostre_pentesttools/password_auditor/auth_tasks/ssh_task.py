"""This module is a wrapper task for handling a SSH client."""
import logging
import socket
import sys
import warnings

import paramiko
from tools.password_auditor.auth_tasks.auth_task import AuthTask

TIMEOUT = 5


class SshTask(AuthTask):
    """Task class with a SSH client attribute."""

    def __init__(self, task_id, host, port, username, password):
        super().__init__(task_id, host, port, username, password)
        self.client = None

    def clean(self):
        """Closes the client"""
        try:
            self.client.close()
        except:
            pass

    def connect(self):
        """Tries to connect with a SSHClient then closes"""

        logging.getLogger("paramiko.transport").setLevel(logging.CRITICAL)
        warnings.filterwarnings(action="ignore", module=".*paramiko.*")

        try:
            self.client = paramiko.SSHClient()
            self.client.set_missing_host_key_policy(paramiko.AutoAddPolicy())
            self.client.connect(
                hostname=self.host,
                port=self.port,
                username=self.username,
                password=self.password,
                timeout=TIMEOUT,
                allow_agent=False,
                look_for_keys=False,
            )

            logging.info(
                "[SshTask %i] Connected to the server %s with username %s and password %s",
                self.id,
                self.host,
                self.username,
                self.password,
            )
            self.conn_status = AuthTask.SUCCESS
            self.auth_status = AuthTask.SUCCESS

        except paramiko.AuthenticationException:
            self.conn_status = AuthTask.SUCCESS

        except (paramiko.SSHException, socket.timeout, paramiko.ssh_exception.NoValidConnectionsError):
            pass

        except:
            logging.warning("[SshTask %i] Exception in connecting to the server", self.id, exc_info=True)

        finally:
            self.client.close()


def main():
    """Tries to connect with the given target, port, username and password."""

    if len(sys.argv) != 5:
        print(f"Usage: python {sys.argv[0]} <target> <port> <username> <password>")
        return

    ssh_task = SshTask(1, sys.argv[1], int(sys.argv[2]), sys.argv[3], sys.argv[4])
    ssh_task.connect()

    if ssh_task.conn_status == AuthTask.FAILED:
        print("Could not attempt auth/ Connection error!")
    elif ssh_task.auth_status == AuthTask.SUCCESS:
        print("Successfully connected!")
    else:
        print("Wrong credentials!")


if __name__ == "__main__":
    # Setup logging
    logging.basicConfig(
        filename=sys.argv[0].replace("py", "log"),
        level=logging.DEBUG,
        format="%(asctime)s %(levelname)7s  %(filename)16s %(funcName)20s  %(lineno)3d  %(message)s",
        datefmt="%Y-%m-%d %H:%M:%S",
    )
    main()
